JSON

 4. Создать внешний репозиторий c названием JSON.
Зайти в GitHab и создать репозиторий JSON.

 5. Клонировать репозиторий JSON на локальный компьютер.
git clone https://github.com/rasitanep318/JSON.git

 6. Внутри локального JSON создать файл “new.json”.
touch new.json

 7. Добавить файл под гит.
git status
git add new.json

 8. Закоммитить файл.
git commit -m "addnew.json"

 9. Отправить файл на внешний GitHub репозиторий.
git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
vim new.json - для начала нажать i, в конце: wq Eter (сохранить)

 11. Отправить изменения на внешний репозиторий.
git status
git add new.json
git commit -m "add new.json"
git push

 12. Создать файл preferences.json
touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
vim preferences.json - для начала нажать i, в конце: wq Eter (сохранить)

 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
touch sklls.json
vim sklls.json - для начала нажать i, в конце: wq Eter (сохранить)

Сделать коммит в одну строку.
git add . && git commit -m "the 2 json files"

 15. Отправить сразу 2 файла на внешний репозиторий.
git push

 16. На веб интерфейсе создать файл bug_report.json.
Зайти в GitHub, AddFile > Create new file - Name file - bug_report.json.

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Кликнуть ЛКМ "Commit changes"

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
Выбрать файл bug_report.json, нажать редактирование, записать баг репорт в формате JSON

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Кликнуть ЛКМ "Commit changes"

 20. Синхронизировать внешний и локальный репозиторий JSON
git pull

XML

 21. Создать внешний репозиторий c названием XML.
Зайти в GitHab и создать репозиторий XML.

 22. Клонировать репозиторий XML на локальный компьютер.
git clone https://github.com/rasitanep318/XML.git

 23. Внутри локального XML создать файл “new.xml”.
touch new.xml

 24. Добавить файл под гит.
git status
git add new.xml

 25. Закоммитить файл.
git commit -m "add new.xml"

 26. Отправить файл на внешний GitHub репозиторий.
git push

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
cat >> new.xml - заполнить строки и ctrl + C (сохранить)

 28. Отправить изменения на внешний репозиторий.
git status
git add new.xml
git commit -m "add new.xml"
git push

 29. Создать файл preferences.xml
touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
cat >> preferences.xml - заполнить строки и ctrl + C (сохранить)

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
touch sklls.xml
cat >> sklls.xml

 32. Сделать коммит в одну строку.
git add . && git commit -m "the 2 xml files"

 33. Отправить сразу 2 файла на внешний репозиторий.
git push

 34. На веб интерфейсе создать файл bug_report.xml.
Зайти в GitHub, AddFile > Create new file - Name file - bug_report.xml.

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Кликнуть ЛКМ "Commit changes"

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
Выбрать файл bug_report.xml, нажать редактирование, записать баг репорт в формате XML 

TXT

 1. Создать внешний репозиторий c названием TXT.
Зайти в GitHab и создать репозиторий TXT.

 2. Клонировать репозиторий TXT на локальный компьютер.
git clone https://github.com/rasitanep318/TXT.git

 3. Внутри локального TXT создать файл “new.txt”.
touch new.txt

 4. Добавить файл под гит.
git status
git add new.txt

 5. Закоммитить файл.
 git commit -m "addnew.txt"

 6. Отправить файл на внешний GitHub репозиторий.
git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
vim new.txt - для начала нажать i, в конце: wq Eter (сохранить)
или
cat >> new.txt - заполнить строки и ctrl + C (сохранить)

 8. Отправить изменения на внешний репозиторий.
git status
git add new.txt
git commit -m "add new.txt"
git push

 9. Создать файл preferences.txt
touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
vim preferences.txt - для начала нажать i, в конце: wq Eter (сохранить)
или
cat >> preferences.txt - заполнить строки и ctrl + C (сохранить)

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
touch sklls.txt
cat >> sklls.txt

 12. Сделать коммит в одну строку.
git add . && git commit -m "the 2 txt files"

 13. Отправить сразу 2 файла на внешний репозиторий.
git push

 14. На веб интерфейсе создать файл bug_report.txt.
Зайти в GitHub, AddFile > Create new file - Name file - bug_report.txt.

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Кликнуть ЛКМ "Commit changes"

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
Выбрать файл bug_report.txt, нажать редактирование, записать баг репорт в формате TXT

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Кликнуть ЛКМ "Commit changes"

 18. Синхронизировать внешний и локальный репозиторий TXT
git pull
